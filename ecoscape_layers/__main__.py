import argparse
import os
from constants import RESAMPLING_METHODS, REFINE_METHODS
from bird_habitats import generate_habitats

def main(args):
    output_folder = os.getcwd()

    print(f"Calling generate_habitats with:\n\t\
            species_list {args.species_list}\n\t\
            terrain {args.terrain}\n\t\
            output_folder {output_folder}\n\t\
            resistance_codes {args.resistance_codes}\n\t\
            bounds {args.bounds}\n\t\
            crs {args.crs}\n\t\
            resolution {args.resolution}\n\t\
            resampling {args.resampling}\n\t\
            padding {args.padding}\n\t\
            refine_method {args.refine_method}\n\t\
            reproject_inputs {args.reproject_inputs}\n\t\
                ")

    # validate inputs
    assert os.path.isfile(args.species_list), f"{args.species_list} is an invalid species_list"
    assert os.path.isfile(args.terrain), f"{args.terrain} is an invalid terrain_path"
    assert os.path.isdir(output_folder), f"output_folder {output_folder} is not a valid directory"
    assert args.resolution == None or isinstance(args.resolution, int), "invalid resolution"
    assert args.refine_method in REFINE_METHODS, f"{args.resampling} is not a valid refine method. Value must be in {REFINE_METHODS}"
    assert args.resampling in RESAMPLING_METHODS, \
                f"{args.resampling} is not a valid resampling value. See https://gdal.org/programs/gdalwarp.html#cmdoption-gdalwarp-r for valid arguments"
    if not args.reproject_inputs:
        assert os.path.isfile(args.resistance_codes), f"resistance_codes {args.resistance_codes} does not exist; set reproject_inputs to True to generate"

    generate_habitats(args.species_list, args.terrain, output_folder, args.resistance_codes,
                        args.bounds, args.crs, args.resolution, args.resampling, args.padding,
                        args.refine_method, args.reproject_inputs)

    print("ran generate_habitats")

if __name__ == '__main__':
    # main(argparse.Namespace(habitat='/tests/assets/habitat_uint8.tif', terrain='/tests/assets/terrain_uint8.tif', resistance='tests/assets/transmission_refined_0.5.csv', repopulation='./repopulation_uint8.tif', gradient=None, hop_distance=4, num_spreads=400, num_simulations=2, seed_density=4))
    # main(argparse.Namespace(habitat='/Users/nvalett/Documents/Natalie/Species Dist Research/Code/Connectivity-Package/ecoscape/tests/assets/habitat_float32.tif', terrain='/Users/nvalett/Documents/Natalie/Species Dist Research/Code/Connectivity-Package/ecoscape/tests/assets/terrain_float32.tif', resistance='/Users/nvalett/Documents/Natalie/Species Dist Research/Code/Connectivity-Package/ecoscape/tests/assets/transmission_refined_0.5.csv', repopulation='/Users/nvalett/Documents/Natalie/Species Dist Research/Code/Connectivity-Package/ecoscape/tests/assets/repopulation_float32.tif', gradient=None, hop_distance=4, num_spreads=15, num_simulations=50, batch_size=1, seed_density=4))
    
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--species_list', type=os.path.abspath, default=None,
                        help='Path to txt file of the bird species, with 6-letter eBird species codes on individual lines')
    parser.add_argument('-t', '--terrain', type=os.path.abspath, default=None,
                        help='Path to terrain raster')
    parser.add_argument('-r', '--resistance_codes', type=os.path.abspath, default=None,
                        help='Path to a CSV containing terrain resistance codes. If not generated, it can be generated by setting reproject_inputs to True')
    parser.add_argument('-c', '--crs', type=str, default=None,
                        help='Chosen CRS to reproject all input files to, as an ESRI WKT string.')
    parser.add_argument('-R', '--resolution', type=int, default=None,
                        help='Resolution in the units of the chosen CRS. Set to None to just use the current resolution of the terrain raster')
    parser.add_argument('-e', '--resampling', type=str, default="near",
                        help='Type of resampling to use when reprojecting the input tiffs; see https://gdal.org/programs/gdalwarp.html#cmdoption-gdalwarp-r for valid arguments')
    parser.add_argument('-p', '--padding', type=int, default=200000,
                        help='Padding in units of chosen CRS to add around the bounds')
    parser.add_argument('-m', '--refine_method', type=str, default="forest_add308",
                        help='What terrain should be considered as good habitat ("forest", "forest_add308", "allsuitable", or "majoronly")')
    parser.add_argument('-i', '--reproject_inputs', type=bool, default=False,
                        help='Set True to reproject terrain to the CRS, resolution, and resampling method given. Produces new terrain and new terrain_codes_path')
    parser.add_argument('-b', '--bounds', type=tuple, default=None,
                        help='tuple bounds: bounding box (xmin, ymin, xmax, ymax) for the output (in the same coordinate system)')

    args = parser.parse_args()
    main(args)
    
